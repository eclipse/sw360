/*
 * Copyright Siemens AG, 2021. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.clients.rest;

import static com.github.tomakehurst.wiremock.client.WireMock.delete;
import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.patch;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;
import static org.assertj.core.api.Assertions.assertThat;
import static org.eclipse.sw360.http.utils.HttpUtils.waitFor;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360ReleaseVulnerabilityRelation;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360Vulnerability;
import org.eclipse.sw360.http.utils.HttpConstants;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class SW360VulnerabilityClientIT extends AbstractMockServerTest {
    private static final String UPDATED_TITLE_OF_VULNERABILITY = "Updated Title of vulnerability";
    private static final String EXTERNAL_ID = "test987";
    private SW360VulnerabilityClient vulnerabilityClient;

    @Before
    public void setUp() throws IOException {
        vulnerabilityClient = new SW360VulnerabilityClient(createClientConfig(), createMockTokenProvider());
        prepareAccessTokens(vulnerabilityClient.getTokenProvider(), CompletableFuture.completedFuture(ACCESS_TOKEN));

        cleanUp();
        createVulnerability();
    }

    @Test()
    public void testCreateVulnerability() throws IOException {
    }

    @Test
    public void testPatchVulnerability() throws IOException {
        SW360Vulnerability vulnerability = readTestJsonFile(resolveTestFileURL("vulnerability.json"),
                SW360Vulnerability.class);
        vulnerability.setTitle(UPDATED_TITLE_OF_VULNERABILITY);
        String vulnerabilityJson = toJson(vulnerability);
        wireMockRule.stubFor(patch(urlEqualTo("/vulnerabilities/" + vulnerability.getExternalId()))
                .withRequestBody(equalToJson(vulnerabilityJson))
                .willReturn(aJsonResponse(HttpConstants.STATUS_ACCEPTED).withBody(vulnerabilityJson)));

        SW360Vulnerability patchedvulnerability = waitFor(
                vulnerabilityClient.patchVulnerability(vulnerability, vulnerability.getExternalId()));
        assertThat(patchedvulnerability).isEqualTo(vulnerability);

    }

    @Test
    public void testGetVulnerability() throws IOException {
        wireMockRule.stubFor(get(urlPathEqualTo("/vulnerabilities/" + EXTERNAL_ID))
                .willReturn(aJsonResponse(HttpConstants.STATUS_OK).withBodyFile("vulnerability.json")));

        SW360Vulnerability vulnerability = waitFor(vulnerabilityClient.getVulnerabilityByExternalId(EXTERNAL_ID));
        assertThat(vulnerability.getDescription()).isEqualTo("Description of vulnerability");
        assertThat(vulnerability.getPriorityText()).isEqualTo("Priority Text");
    }

    @Test
    public void testGetAllVulnerability() throws IOException {
        wireMockRule.stubFor(get(urlPathEqualTo("/vulnerabilities"))
                .willReturn(aJsonResponse(HttpConstants.STATUS_OK).withBodyFile("all_vulnerabilities.json")));

        List<SW360Vulnerability> vulnerabilities = waitFor(vulnerabilityClient.getVulnerabilities());

        assertThat(vulnerabilities.size()).isGreaterThan(0);

        Optional<SW360Vulnerability> vulToTest = vulnerabilities.stream()
                .filter(vl -> vl.getExternalId().equals(EXTERNAL_ID)).findFirst();

        assertThat(vulToTest).isPresent();
        assertThat(vulToTest.get().getTitle()).isEqualTo("Title of vulnerability 12345");

    }

    @Test
    public void testCreateReleaseVulnerabilityRelation() throws IOException {
        createVulnerabilityReleaseRelation();
    }

    @Test
    public void testDeleteReleaseVulnerabilityRelation() throws IOException {
        createVulnerabilityReleaseRelation();

        wireMockRule.stubFor(delete(urlPathEqualTo("/vulnerabilities/" + EXTERNAL_ID + "/release/1234"))
                .willReturn(aJsonResponse(HttpConstants.STATUS_OK)));

        Integer responseCode = waitFor(vulnerabilityClient.deleteVulnerabilityReleaseRelation(EXTERNAL_ID, "1234"));
        assertThat(responseCode).isEqualTo(200);

    }

    @Test
    public void testDeleteVulnerability() throws IOException {
        wireMockRule.stubFor(delete(urlPathEqualTo("/vulnerabilities/" + EXTERNAL_ID))
                .willReturn(aJsonResponse(HttpConstants.STATUS_OK)));

        Integer responseCode = waitFor(vulnerabilityClient.deleteVulnerability(EXTERNAL_ID));
        assertThat(responseCode).isEqualTo(200);
    }

    private void createVulnerability() throws IOException {
        SW360Vulnerability vulnerability = readTestJsonFile(resolveTestFileURL("vulnerability.json"),
                SW360Vulnerability.class);
        String vulnerabilityJson = toJson(vulnerability);
        wireMockRule.stubFor(post(urlEqualTo("/vulnerabilities")).withRequestBody(equalToJson(vulnerabilityJson))
                .willReturn(aJsonResponse(HttpConstants.STATUS_CREATED).withBody(vulnerabilityJson)));

        SW360Vulnerability createdVulnerability = waitFor(vulnerabilityClient.createVulnerability(vulnerability));

        assertThat(createdVulnerability).isEqualTo(vulnerability);
    }

    private void cleanUpVulnerability() {
        try {
            wireMockRule.stubFor(delete(urlPathEqualTo("/vulnerabilities/" + EXTERNAL_ID))
                    .willReturn(aJsonResponse(HttpConstants.STATUS_OK)));

            waitFor(vulnerabilityClient.deleteVulnerability(EXTERNAL_ID));
        } catch (Exception exp) {
        }
    }

    private void createVulnerabilityReleaseRelation() throws IOException {

        SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation = readTestJsonFile(
                resolveTestFileURL("release_vulnerability_relation.json"), SW360ReleaseVulnerabilityRelation.class);
        String releaseVulnerabilityRelationJson = toJson(releaseVulnerabilityRelation);
        wireMockRule.stubFor(post(urlEqualTo("/vulnerabilities/" + EXTERNAL_ID + "/releaseVulnerabilityRelation"))
                .withRequestBody(equalToJson(releaseVulnerabilityRelationJson))
                .willReturn(aJsonResponse(HttpConstants.STATUS_CREATED).withBody(releaseVulnerabilityRelationJson)));

        SW360ReleaseVulnerabilityRelation createdReleaseVulnerabilityRelation = waitFor(
                vulnerabilityClient.createVulnerabilityReleaseRelation(EXTERNAL_ID, releaseVulnerabilityRelation));
        assertThat(createdReleaseVulnerabilityRelation).isEqualTo(releaseVulnerabilityRelation);
    }

    private void cleanUpVulnerabilityReleaseRealtion() {
        try {
            wireMockRule.stubFor(delete(urlPathEqualTo("/vulnerabilities/" + EXTERNAL_ID + "/release/1234"))
                    .willReturn(aJsonResponse(HttpConstants.STATUS_OK)));

            waitFor(vulnerabilityClient.deleteVulnerabilityReleaseRelation(EXTERNAL_ID, "1234"));
        } catch (Exception exp) {

        }
    }

    @After
    public void cleanUp() {
        cleanUpVulnerabilityReleaseRealtion();
        cleanUpVulnerability();
    }
}
